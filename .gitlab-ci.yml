variables: &global-variables
  COVERAGE_RCFILE: .coveragerc
  DOCKER_BUILDKIT: 1
  GIT_DEPTH: 10
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip"

stages:
  - build_image
  - build
  - test
  - test_coverage
  - page_build
  - page_deploy
  - upload


.job_template: &setup
  image: &dev_image $CI_REGISTRY_IMAGE/build:latest
  before_script:
    - g++ --version
    - python3 --version
  except:
    - schedules


.test_template: &py_setup
  image: &dev_image $CI_REGISTRY_IMAGE/build:latest
  stage: test
  before_script:
    - g++ --version
    - python3 --version
    - pip3 install $(echo dist/*.whl)
  except:
    - schedules
  artifacts:
    paths:
      - .coverage.*
      - "*.xml"
    reports:
      junit:
        - "*.xml"
  interruptible: true


.docker_build_base: &docker_build
  image: docker:latest
  stage: build_image
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/build:latest || true
    - docker build --pull=true --cache-from $CI_REGISTRY_IMAGE/build:latest -t $CI_REGISTRY_IMAGE/build:latest .
    - docker push $CI_REGISTRY_IMAGE/build:latest

docker_build_schedule:
  <<: *docker_build
  only:
    - schedules

docker_build_manual:
  <<: *docker_build
  when: manual
  except:
    - schedules

wheel_build:
  <<: *setup
  stage: build
  script:
    - python3 setup.py bdist_wheel
  artifacts:
    paths:
      - dist/*.whl

b4tf:
  <<: *py_setup
  script:
    - coverage run -m xmlrunner test/test_b4tf.py

PBP:
  <<: *py_setup
  script:
    - coverage run -m xmlrunner test/test_pbp.py

MCBN:
  <<: *py_setup
  script:
    - coverage run -m xmlrunner test/test_mcbn.py

Issue:
  <<: *py_setup
  script:
    - coverage run -m xmlrunner test/test_issue.py

coverage:
  <<: *setup
  stage: test_coverage
  script:
    - mkdir -p public/coverage
    - coverage combine
    - coverage report
    - coverage html -d public/coverage
  artifacts:
    paths:
      - public/coverage
  coverage: '/^TOTAL.*\s+(\d+\%)$/'


emacs:
  image: iquiw/alpine-emacs
  stage: build
  script:
    - emacs --batch README.org -l site/init.el --eval '(org-hugo-export-wim-to-md :all-subtrees nil t)'
    - emacs --batch CHANGELOG.org -l site/init.el --eval '(org-hugo-export-wim-to-md :all-subtrees nil t)'
    - cd site
    - emacs --batch site.org -l init.el --eval '(org-hugo-export-wim-to-md :all-subtrees nil t)'
  artifacts:
    paths:
      - site/content
  except:
    - schedules

README_MD:
  image: iquiw/alpine-emacs
  stage: build
  script:
    - emacs --batch README.org --eval '(org-md-export-to-markdown)'
  artifacts:
    paths:
      - README.md
  except:
    - schedules

hugo:
  image: registry.gitlab.com/pages/hugo:latest
  stage: page_build
  variables:
    <<: *global-variables
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - hugo version
    - cd site
    - hugo -c content -v
  artifacts:
    paths:
      - public
  needs:
    - emacs
  except:
    - schedules

sphinx:
  image: *dev_image
  stage: page_build
  script:
    - pip install $(echo dist/*.whl)
    - sphinx-apidoc -F -e -o sphinx b4tf
    - sphinx-build -b html -W --keep-going sphinx public/api
  artifacts:
    paths:
      - sphinx/*.rst
      - public
  needs:
    - wheel_build
  except:
    - schedules

pages:
  image: alpine
  stage: page_deploy
  environment: production
  script:
    - echo ""
  artifacts:
    paths:
      - public
  only:
    - master
  except:
    - schedules

pypi:
  image: *dev_image
  stage: upload
  script:
    - rm -rf dist
    - python3 setup.py clean
    - python3 setup.py sdist bdist_wheel
    - twine upload --verbose dist/b4tf-*
  only:
    - tags
  except:
    - branches
    - schedules
  needs:
    - README_MD
    - coverage
